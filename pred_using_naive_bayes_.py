# -*- coding: utf-8 -*-
"""Pred_Using_Naive_Bayes .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TYwtSqD40BgPxzHKvLR84vi8vql8Ksm8
"""

from google.colab import drive
drive.mount('/content/drive')

# Install required libraries
!pip install pandas scikit-learn

# Import libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder

data = pd.read_csv('/content/drive/MyDrive/Luba_Early_Pred_Using_Naive_Bayes/Dataset/final_disease_prediction.csv')

"""# Data Preprocessing"""

# Initialize label encoders
sex_encoder = LabelEncoder()
activity_encoder = LabelEncoder()

# Convert categorical features
data['sex'] = sex_encoder.fit_transform(data['sex'])
data['physical_activity'] = activity_encoder.fit_transform(data['physical_activity'])

# Create disease targets using medical criteria
data['diabetes'] = (data['HbA1c'] >= 6.5).astype(int)
data['hypertension'] = (data['restbp'] >= 130).astype(int)
data['ckd'] = ((data['serum_creatinine'] > 1.3) &
              (data['urine_protein'] >= 1)).astype(int)

# Convert binary features to integers
binary_cols = ['family_history', 'smoking_status', 'fbs']
for col in binary_cols:
    data[col] = data[col].astype(int)

"""# Feature Selection"""

base_features = ['age', 'sex', 'BMI', 'family_history',
                'smoking_status', 'physical_activity']

# Define feature sets for each model
diabetes_features = base_features + ['fbs']
hypertension_features = base_features + ['diabetes']
ckd_features = base_features + ['diabetes', 'hypertension']

"""# Model Training"""

# Diabetes Model
X_diab = data[diabetes_features]
y_diab = data['diabetes']
X_train_d, X_test_d, y_train_d, y_test_d = train_test_split(
    X_diab, y_diab, test_size=0.2, random_state=42)

diabetes_model = GaussianNB()
diabetes_model.fit(X_train_d, y_train_d)

# Hypertension Model
X_hyp = data[hypertension_features]
y_hyp = data['hypertension']
X_train_h, X_test_h, y_train_h, y_test_h = train_test_split(
    X_hyp, y_hyp, test_size=0.2, random_state=42)

hypertension_model = GaussianNB()
hypertension_model.fit(X_train_h, y_train_h)

# CKD Model
X_ckd = data[ckd_features]
y_ckd = data['ckd']
X_train_c, X_test_c, y_train_c, y_test_c = train_test_split(
    X_ckd, y_ckd, test_size=0.2, random_state=42)

ckd_model = GaussianNB()
ckd_model.fit(X_train_c, y_train_c)

"""# Model Evaluation"""

def evaluate_model(model, X_test, y_test, name):
    y_pred = model.predict(X_test)
    print(f"\n{name} Model Performance:")
    print(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")
    print(classification_report(y_test, y_pred))

evaluate_model(diabetes_model, X_test_d, y_test_d, "Diabetes")
evaluate_model(hypertension_model, X_test_h, y_test_h, "Hypertension")
evaluate_model(ckd_model, X_test_c, y_test_c, "CKD")

"""# Prediction Function"""

def predict_chronic_diseases(patient_data):
    # Convert to DataFrame and encode categorical values
    patient_df = pd.DataFrame([patient_data])

    # Encode categorical features
    if 'sex' in patient_df.columns:
        patient_df['sex'] = sex_encoder.transform(patient_df['sex'])
    if 'physical_activity' in patient_df.columns:
        patient_df['physical_activity'] = activity_encoder.transform(
            patient_df['physical_activity'])

    # Diabetes prediction
    diab_input = patient_df[diabetes_features]
    diabetes_prob = diabetes_model.predict_proba(diab_input)[0][1]
    patient_df['diabetes'] = diabetes_model.predict(diab_input)

    # Hypertension prediction
    hyp_input = patient_df[hypertension_features]
    hypertension_prob = hypertension_model.predict_proba(hyp_input)[0][1]
    patient_df['hypertension'] = hypertension_model.predict(hyp_input)

    # CKD prediction
    ckd_input = patient_df[ckd_features]
    ckd_prob = ckd_model.predict_proba(ckd_input)[0][1]

    return {
        'diabetes_risk': round(diabetes_prob, 2),
        'hypertension_risk': round(hypertension_prob, 2),
        'ckd_risk': round(ckd_prob, 2)
    }

"""# Test Example"""

sample_patient = {
    'age': 45,
    'sex': 'Female',
    'BMI': 28.5,
    'family_history': 1,
    'smoking_status': 0,
    'physical_activity': 'Very Active',
    'fbs': 0
}

print("\nExample Prediction:")
print(predict_chronic_diseases(sample_patient))